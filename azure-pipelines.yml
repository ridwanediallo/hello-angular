# Node.js with Angular
# Build, test, and deploy an Angular project using Azure Pipelines.

trigger:
- main

pool:
  name: Default  # Replace with the name of your agent pool

variables:
  npm_config_cache: $(Pipeline.Workspace)/.npm  # Cache location for npm

steps:
# Step 1: Install Node.js
- task: NodeTool@0
  inputs:
    versionSpec: '20.x'
  displayName: 'Install Node.js'

# Step 2: Cache npm dependencies
- task: Cache@2
  inputs:
    key: 'npm | "$(Agent.OS)" | package-lock.json'
    restoreKeys: |
      npm | "$(Agent.OS)"
    path: $(npm_config_cache)
  displayName: 'Cache npm dependencies'

# Step 3: Install Angular CLI and project dependencies
- script: |
    npm install -g @angular/cli
    npm install
  displayName: 'npm install'

# Step 4: Build the Angular project
- script: |
    ng build --configuration production
  displayName: 'Build Angular project'

# Step 5: Run unit tests
# - script: |
#     npm test
#   displayName: 'Run unit tests'

# Step 6: Publish build artifacts
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: 'dist/hello-angular'   # Replace with your Angular app's dist folder
    ArtifactName: 'drop'
    publishLocation: 'Container'
  displayName: 'Publish build artifacts'

# Step 7: Deploy to Azure Static Web Apps (optional)
- script: |
    echo "$(sshPrivateKey)" > id_rsa  # Write the SSH private key to a file
    chmod 600 id_rsa  # Set the correct permissions for the private key
    scp -r -i id_rsa $(Pipeline.Workspace)/drop/dist/hello-angular/* adiallo@10.221.6.18:/home/adiallo/test_deploy
    rm -f id_rsa  # Clean up the private key file
  displayName: 'Deploy to Server (SCP)'

  - script: |
    ls -R $(Pipeline.Workspace)/drop/dist/hello-angular
  displayName: 'List Build Artifacts'
